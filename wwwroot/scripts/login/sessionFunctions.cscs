function GetSessionIdFromCookie(args) {
    headers = args["Headers"];
    cookies = headers.Contains("Cookie") ? headers["Cookie"] : "";

    // Try to extract session ID
    sessionCookie = ExtractCookie(cookies, "sessionId");
    return sessionCookie;
}

function GenerateSessionId() {
    // Simple timestamp + random
    ts = Now("yyyyMMddHHmmss");
    rnd = Math.Round(Math.Random() * 10000);
    return ts + "_" + rnd;
}

function ExtractCookie(cookieHeader, name) {
    if (cookieHeader == null || cookieHeader == ""){
        return null;
    }

    returnValue = null;

    parts = cookieHeader.Split(";");
    for(i = 0; i < Size(parts); i++) {
        part = strTrim(parts[i]);
        kv = part.Split("=");
        if (Size(kv) == 2 && kv[0] == name) {
            returnValue = kv[1];
            break;
        }
    }

    return returnValue;
}


function SetSession(sessionId, key, value) {
    // Get current session data from DB
    existing = GetSessionRowFromDb(sessionId);
    if (existing == null) {
        // Create new session
        dataDict = {};
    } else {
        dataDict = DeserializeJson(existing[1]); // Data column
    }

    // Update or add key
    dataDict[key] = value;

    // Serialize
    jsonData = SerializeJson(dataDict);
    now = Now("yyyy-MM-dd HH:mm:ss");

    query = "MERGE " + ReadConfig("CommonDB") + ".dbo.SessionStore AS target " +
            "USING (SELECT @sessionId AS SessionId) AS source " +
            "ON target.SessionId = source.SessionId " +
            "WHEN MATCHED THEN " +
            "    UPDATE SET Data = @data, UpdatedAt = @now, ExpiresAt = DATEADD(MINUTE, 30, @now) " +
            "WHEN NOT MATCHED THEN " +
            "    INSERT (SessionId, Data, CreatedAt, UpdatedAt, ExpiresAt) " +
            "    VALUES (@sessionId, @data, @now, @now, DATEADD(MINUTE, 30, @now));";

    sqlParams = {};
    sqlParams.Add({"@sessionId", sessionId});
    sqlParams.Add({"@data", jsonData});
    sqlParams.Add({"@now", now});

    sqlNonQuery(query, sqlParams);
}


function CheckSession(sessionId) {
    if (sessionId == null){
        return false;
    }

    row = GetSessionRowFromDb(sessionId);
    if (row == null) {
        return false;
    }

    // Check if expired
    expiresAt = row[2]; // ExpiresAt column
    now = Now("yyyy-MM-dd HH:mm:ss");

    if (now > expiresAt) {
        ClearSessionById(sessionId);
        return false;
    }

    return true;
}

function GetSessionData(sessionId) {
    if(!CheckSession(sessionId)) {
        return {};
    }

    row = GetSessionRowFromDb(sessionId);
    if (row == null) {
        return {};
    }

    // Update access time
    RefreshSessionExpiry(sessionId);

    // Parse data and return full dict
    dataJson = row[1]; // Data column
    dict = DeserializeJson(dataJson);
    return dict;
}

function ExtractSessionEntry(sessionData, key, defaultValue = null) {
    if (sessionData.Contains(key)) {
        return sessionData[key];
    }
    return defaultValue;
}

function HasAllData(sessionData) {
    hasAllData = true;
    requiredKeys = ["CompanyCode", "FiscalYear", "CompanyName", "DatabaseName", "UserCode", "UserName", "UserRole"];
    for(i = 0; i < Size(requiredKeys); i++) {
        if (!sessionData.Keys.Contains(requiredKeys[i]) || sessionData[requiredKeys[i]] == null) {
            hasAllData = false;
            break;
        }
    }
    return hasAllData;
}

// Helper: Fetch full session row
function GetSessionRowFromDb(sessionId) {
    query = "SELECT SessionId, Data, Convert(nvarchar, ExpiresAt, 20) FROM " + ReadConfig("CommonDB") + ".dbo.SessionStore WHERE SessionId = @id";
    sqlParams = {};
    sqlParams.Add({"@id", sessionId});
    result = sqlQuery(query, sqlParams);
    return (result != null && Size(result) > 1) ? result[1] : null;
}

// Helper: Refresh UpdatedAt and extend expiry
function RefreshSessionExpiry(sessionId) {
    query = "UPDATE " + ReadConfig("CommonDB") + ".dbo.SessionStore SET UpdatedAt = GETDATE(), ExpiresAt = DATEADD(MINUTE, 30, GETDATE()) WHERE SessionId = @id";
    sqlParams = {};
    sqlParams.Add({"@id", sessionId});
    sqlNonQuery(query, sqlParams);
}


function ClearSessionById(sessionId) {
    query = "DELETE FROM " + ReadConfig("CommonDB") + ".dbo.SessionStore WHERE SessionId = @id";
    sqlParams = {};
    sqlParams.Add({"@id", sessionId});
    sqlNonQuery(query, sqlParams);
}





// You can call this via a scheduled task or cron job.
CreateEndpoint("GET", "/admin/cleanup-sessions", "CleanupExpiredSessions");
function CleanupExpiredSessions(args) {
    // Optional: Add auth check
    if (GetSession(args, "UserRole") != "admin") {
        return Response({"Content-Type": "text/html"}, "<h1>Unauthorized</h1>", 403);
    }

    query = "DELETE FROM " + ReadConfig("CommonDB") + ".dbo.SessionStore WHERE ExpiresAt < GETDATE()";
    sqlNonQuery(query, {});

    return Response({"Content-Type": "text/html"}, "<p>Cleanup complete. Expired sessions removed.</p>", 200);
}
