    // html2 = 
    // "<html>
    //     <body>
    //         <h1>Hello World from web API!</h1>
    //         <a href=\"/testingPage\">Go to testing page</a>
    //     </body>
    // </html>
    // ";



//Hello World page (simple html)
CreateEndpoint("GET", "/", "getRootHandlerFunction");
function getRootHandlerFunction(){
    responseBody =  "<html>" + 
                        "<body>" + 
                            "<h1>Hello World from web API!</h1>" + 
                            "<a href=\"/testingPage\">Go to testing page</a>" + 
                        "</body>" + 
                    "</html>";

    responseHeaders = {"Content-Type": "text/html"};
    statusCode = 200;

    // return Response(responseHeaders, responseBody, statusCode);
    return {"headers": responseHeaders, "body": responseBody, "statusCode": statusCode};
}

//testing links page (html from template)
CreateEndpoint("GET", "/testingPage", "getTestingPage");
function getTestingPage(){
    responseBody = RenderHtml(LoadTemplate(ReadConfig("TemplatesDirectory") + "testingPage.html"));
    
    responseHeaders = {"Content-Type": "text/html"};
    statusCode = 200;
    
    return Response(responseHeaders, responseBody, statusCode);
}

//------------------------------

//list request method and path
CreateEndpoint("GET", "/listRequestMethodAndPath", "listRequestMethodAndPath");
function listRequestMethodAndPath(request){
    Method = request["HttpMethod"]; // string
    RequestPath = request["RequestPath"]; // string

    responseBody = "Method = " + Method + "\n";
    responseBody += "RequestPath = " + RequestPath;

    responseHeaders = {"Content-Type": "text/plain"};
    statusCode = 200;
    return Response(responseHeaders, responseBody, statusCode);
}

//list request headers
CreateEndpoint("GET", "/listRequestHeaders", "listRequestHeaders");
function listRequestHeaders(request){
    Headers = request["Headers"]; // dictionary

    responseHeaders = {"Content-Type": "text/plain"};
    responseBody = "";
    for(key : Headers.Keys){
        responseBody += key + " = " + Headers[key] + "\n";
    }
    statusCode = 200;
    return Response(responseHeaders, responseBody, statusCode);
}


//list query params
CreateEndpoint("GET", "/listQueryParams", "listQueryParams");
function listQueryParams(request){
    QueryParams = request["QueryParams"]; // dictionary
    
    responseBody = "";
    for(key : QueryParams.Keys){
        responseBody += key + " = " + QueryParams[key] + "\n";
    }

    responseHeaders = {"Content-Type": "text/plain"};
    statusCode = 200;
    return Response(responseHeaders, responseBody, statusCode);
}


//list route values
CreateEndpoint("GET", "/listRouteValues/{value1}/{value2}", "listRouteValues");
function listRouteValues(request){
    RouteValues = request["RouteValues"]; // dictionary

    value1 = RouteValues["value1"];
    value2 = RouteValues["value2"];

    responseHeaders = {"Content-Type": "text/plain"};
    responseBody = "value1 = " + value1 + "\n";
    responseBody += "value2 = " + value2 + "\n";
    statusCode = 200;
    return Response(responseHeaders, responseBody, statusCode);
}


//list request body page
CreateEndpoint("GET", "/listRequestBodyTestPage", "getListRequestBodyTestPage");
function getListRequestBodyTestPage(request){
    responseHeaders = {"Content-Type": "text/html"};
    responseBody = RenderHtml(LoadTemplate(ReadConfig("TemplatesDirectory") + "listRequestBodyTestPage.html"));
    statusCode = 200;
    return Response(responseHeaders, responseBody, statusCode);
}


//list request body
CreateEndpoint("POST", "/listRequestBody", "listRequestBody");
function listRequestBody(request){
    Body = request["Body"]; // string

    responseHeaders = {"Content-Type": "text/plain"};
    responseBody = Body;
    statusCode = 200;
    return Response(responseHeaders, responseBody, statusCode);
}



//--- Employees list --------------------------

SQLConnectionString(ReadConfig("SqlConnectionString"));


if(!TableEmployeesExists()){
    CreateTableEmployees();
}

function TableEmployeesExists(){
    sqlString = "IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'employees' AND TABLE_SCHEMA = 'dbo')" +
        " BEGIN SELECT 1 END" +
        " ELSE BEGIN SELECT 0 END";
    sqlResult = SqlQuery(sqlString);

    if(sqlResult[1][0] != 1) {
        return false; // table does not exist
    }else{
        return true; // table already exists
    }
}

function CreateTableEmployees(){
    sqlString = "CREATE TABLE employees (" +
        " id int IDENTITY(1,1) PRIMARY KEY," +
        " name varchar(100)," +
        " surname varchar(100)," +
        " age int," +
        " address varchar(100)," +
        " city varchar(100)," +
        " email varchar(100)" +
        " )";
    try{
        sqlResult = SqlNonQuery(sqlString);
        
        if(sqlResult == -1){
            print("Table employees created successfully.");
        }else{
            print("Error creating table employees. Rows affected: " + sqlResult);
        }
    }catch(ex){
        print("Error creating table employees: " + ex.message);
    }
}


if(true){// if(!EmployeesTableHasData())
    TruncateTableEmployees();
    InsertDataIntoEmployees();
}

function EmployeesTableHasData(){
    sqlString = "SELECT COUNT(*) FROM employees";
    sqlResult = SqlQuery(sqlString);

    if(sqlResult[1][0] > 0) {
        return true; // table has data
    }else{
        return false; // table is empty
    }
}

function TruncateTableEmployees(){
    sqlString = "TRUNCATE TABLE employees";
    try{
        sqlResult = SqlNonQuery(sqlString);
        
        if(sqlResult == -1){
            print("Table employees truncated successfully.");
        }else{
            print("Error truncating table employees. Rows affected: " + sqlResult);
        }
    }catch(ex){
        print("Error truncating table employees: " + ex.message);
    }
}

function InsertDataIntoEmployees(){
    sqlString = "INSERT INTO employees " + 
        "(name, surname, age, address, city, email) VALUES " +
        "('John', 'Doe', 30, '123 Main St', 'Anytown', 'john.doe@example.com'), " +
        "('Jane', 'Smith', 25, '456 Elm St', 'Othertown', 'jane.smith@example.com'), " +
        "('Alice', 'Johnson', 28, '789 Oak St', 'Sometown', 'alice.johnson@example.com'), " +
        "('Bob', 'Brown', 35, '321 Pine St', 'Anycity', 'bob.brown@example.com'), " +
        "('Charlie', 'Davis', 40, '654 Maple St', 'Anycity', 'charlie.davis@example.com'), " +
        "('David', 'Wilson', 32, '111 Cedar St', 'Newcity', 'david.wilson@example.com'), " +
        "('Emma', 'Moore', 27, '222 Spruce St', 'Oldtown', 'emma.moore@example.com'), " +
        "('Frank', 'Taylor', 29, '333 Birch St', 'Smalltown', 'frank.taylor@example.com'), " +
        "('Grace', 'Anderson', 31, '444 Walnut St', 'Bigcity', 'grace.anderson@example.com'), " +
        "('Henry', 'Thomas', 36, '555 Chestnut St', 'Largetown', 'henry.thomas@example.com'), " +
        "('Ivy', 'Jackson', 24, '666 Willow St', 'Tinyville', 'ivy.jackson@example.com'), " +
        "('Jack', 'White', 38, '777 Aspen St', 'Hilltown', 'jack.white@example.com'), " +
        "('Karen', 'Harris', 33, '888 Redwood St', 'Laketown', 'karen.harris@example.com'), " +
        "('Liam', 'Martin', 26, '999 Cypress St', 'Rivertown', 'liam.martin@example.com'), " +
        "('Mia', 'Lee', 34, '1010 Magnolia St', 'Forestville', 'mia.lee@example.com'), " +
        "('Noah', 'Walker', 37, '1111 Poplar St', 'Mountainview', 'noah.walker@example.com'), " +
        "('Olivia', 'Hall', 23, '1212 Sycamore St', 'Seaside', 'olivia.hall@example.com'), " +
        "('Paul', 'Young', 39, '1313 Hickory St', 'Valleycity', 'paul.young@example.com'), " +
        "('Quinn', 'King', 41, '1414 Dogwood St', 'Baytown', 'quinn.king@example.com'), " +
        "('Ruby', 'Wright', 22, '1515 Alder St', 'Sunnytown', 'ruby.wright@example.com'), " +
        "('Sam', 'Lopez', 29, '1616 Beech St', 'Windycity', 'sam.lopez@example.com'), " +
        "('Tina', 'Hill', 28, '1717 Palm St', 'Rainytown', 'tina.hill@example.com'), " +
        "('Uma', 'Scott', 27, '1818 Maple Ave', 'Snowcity', 'uma.scott@example.com'), " +
        "('Victor', 'Green', 36, '1919 Oak Ave', 'Leafyville', 'victor.green@example.com'), " +
        "('Wendy', 'Baker', 35, '2020 Pine Ave', 'Stonecity', 'wendy.baker@example.com')";

    try{
        sqlResult = SqlNonQuery(sqlString);
        if(sqlResult > 0){
            print("Data inserted into employees table successfully. Rows Affected: " + sqlResult);
        }else{
            print("Error inserting data into employees table. Rows affected: " + sqlResult);
        }
    }catch(ex){
        print("Error inserting data into employees table: " + ex.message);
    }
}


employees_columns = {
    "Id",
    "Name",
    "Surname",
    "Age",
    "Address",
    "City",
    "Email"
};

employees_defaultValues = {
    "Id": 0,
    "Name": "",
    "Surname": "",
    "Age": 0,
    "Address": "",
    "City": "",
    "Email": ""
};


//get initial html template
CreateEndpoint("GET", "/employees-CRUD-app", "getEmployeesCRUDApp");
function getEmployeesCRUDApp(){
    root_headers = {"Content-Type": "text/html"};
    return Response(root_headers, RenderHtml(LoadTemplate(ReadConfig("TemplatesDirectory") + "employees_CRUD.html")), 200);
}


// get employees table (partial html) 
CreateEndpoint("GET", "/employees", "getEmployees");
function getEmployees(request) {
    
    // Pagination
    employees_page = 1;
    if (Contains(request["QueryParams"], "page")) {
        employees_page = int(request["QueryParams"]["page"]);
    }
    if (employees_page < 1) {
        getEmployees_responseHeaders = {"Content-Type": "text/html"};
        return Response(getEmployees_responseHeaders, "Error: 'page' must be positive integer", 200);
    }
    
    // Sorting
    employees_sort = "id";
    if (Contains(request["QueryParams"], "sort")) {
        employees_sort = request["QueryParams"]["sort"];
    }

    employees_order = "asc";
    if (Contains(request["QueryParams"], "order")) {
        employees_order = request["QueryParams"]["order"];
    }
    
    // Fixed page size
    employees_pageSize = 10;
    employees_skip = (employees_page - 1) * employees_pageSize;
        
    //alert after html
    employees_alert = "";
    if (Contains(request["QueryParams"], "alertText")) 
    {
        employees_alert = request["QueryParams"]["alertText"];
    }    
    

    employees_query = "SELECT " +
            "id, name, surname, age, address, city, email " +
            "FROM employees " +
            "ORDER BY " + employees_sort + " " + employees_order + " " +
            "OFFSET @skip ROWS FETCH NEXT @pageSize ROWS ONLY";
    employees_sqlParams = {};
    employees_sqlParams.Add({"@skip", employees_skip});
    employees_sqlParams.Add({"@pageSize", employees_pageSize});
    employees_records = sqlQuery(employees_query, employees_sqlParams);

    employees_countQuery = "SELECT COUNT(*) FROM employees";
    employees_countResult = sqlQuery(employees_countQuery);
    employees_totalRecords = employees_countResult[1][0];
    employees_totalPages = Math.Ceil(employees_totalRecords / employees_pageSize);


    // Build HTML
    employees_html = "<div class='datagrid-container-master'>";
    employees_html += "<table class='datagrid-table'>";
    employees_html += "<thead>";
    employees_html += "<tr>";

    employees_newOrder = "asc";
    if (employees_sort == "id" && employees_order == "asc") {
        employees_newOrder = "desc";
    }
    
    employees_html += "<th><a class='link' hx-get='/employees?page=1&sort=id&order=" + employees_newOrder + "' hx-target='.datagrid-container-master' hx-swap='outerHTML'>Id</a></th>";
    
    for(employees_i = 1; employees_i < Size(employees_columns); employees_i++) {
        employees_column = employees_columns[employees_i];
        
        employees_newOrder = "asc";
        if (employees_sort == employees_column && employees_order == "asc") {
            employees_newOrder = "desc";
        }

        employees_html += "<th><a class='link' hx-get='/employees?page=1&sort=" + employees_column + "&order=" + employees_newOrder + "' hx-target='.datagrid-container-master' hx-swap='outerHTML'>" + employees_column + "</a></th>";        
    }
    
    employees_column = "Actions";
    employees_html += "<th>" + employees_column + "</th>";
    employees_html += "</tr>";
    employees_html += "</thead>";

    employees_html += "<tbody>";

    if(employees_records != null && Size(employees_records) > 1) {
        for(employees_i = 1; employees_i < Size(employees_records); employees_i++) {
            employees_row = employees_records[employees_i];
            
            if (employees_i % 2 == 0) {
                employees_html += "<tr data-id='" + employees_row[0] + "' class='bg-base-200 hover:bg-base-300 cursor-pointer' >";
            } else {
                employees_html += "<tr data-id='" + employees_row[0] + "' class='hover:bg-base-300 cursor-pointer' >";
            }
            
            employees_html += "<td data-field='id'>" + employees_row[0] + "</td>";
            employees_html += "<td data-field='name' class='text-center'>" + employees_row[1] + "</td>";
            employees_html += "<td data-field='surname' class='text-center'>" + employees_row[2] + "</td>";
            employees_html += "<td data-field='age' class='text-left'>" + employees_row[3] + "</td>";
            employees_html += "<td data-field='address' class='text-center'>" + employees_row[4] + "</td>";
            employees_html += "<td data-field='city' class='text-center'>" + employees_row[5] + "</td>";
            employees_html += "<td data-field='email' class='text-center'>" + employees_row[6] + "</td>";
        
            employees_html += "<td class='flex gap-1'>";
            employees_html += "<button class='btn btn-info btn-xs action-button' hx-get='/employees/" + employees_row[0] + "/edit' hx-target='.datagrid-container-master' hx-swap='outerHTML'>Edit</button>";
            employees_html += "<button class='btn btn-error btn-xs action-button' onclick='confirmDeleteEmployee(" + employees_row[0] + ")'>Delete</button>";
            employees_html += "</td>";

            employees_html += "</tr>";
        }
    }
    employees_html += "</tbody>";
    employees_html += "</table>";

    // Pagination
    employees_html += "<div class='pagination'>";
    if(employees_page > 1) {
        employees_html += "<a class='btn btn-sm' hx-get='/employees?page=" + (employees_page - 1) + "&sort=" + employees_sort + "&order=" + employees_order + 
            "' hx-target='.datagrid-container-master' hx-swap='outerHTML'>Previous</a>";
    }
    employees_html += "<span class='page-info'>Page " + employees_page + " of " + employees_totalPages + "</span>";
    if(employees_page < employees_totalPages) {
        employees_html += "<a class='btn btn-sm' hx-get='/employees?page=" + (employees_page + 1) + "&sort=" + employees_sort + "&order=" + employees_order + 
            "' hx-target='.datagrid-container-master' hx-swap='outerHTML'>Next</a>";
    }

    employees_html += "</div>";  
    employees_html += "</div>";


    employees_html += employees_alert; 
    
    
    getEmployees_responseHeaders_2 = {"Content-Type": "text/html"};
    return Response(getEmployees_responseHeaders_2, employees_html, 200);
}


function employees_generateForm(mode, values, id = null, errorHtml = "") {
    employees_generateForm_isEdit = (mode == "edit");
    
    employees_generateForm_html = "<div class='datagrid-container-master'>" +
           "<form class='vertical-form eight-column-form'>";
    
    if (errorHtml != "") {
        employees_generateForm_html += errorHtml;
    }
    
    employees_generateForm_html += "    <div class='grid grid-cols-8 gap-4'>";
    
    for(i = 1; i < Size(employees_columns); i++) {
        employees_generateForm_field = employees_columns[i];
        
        if (Contains(values, employees_generateForm_field))
        {
            employees_generateForm_value = values[employees_generateForm_field];
        }
        else
        {
            employees_generateForm_value = employees_defaultValues[employees_generateForm_field];
        }

        employees_generateForm_html += "      <div><label>" + employees_generateForm_field + ":</label>" +
                "        <input class='input input-bordered input-sm w-full' " +
                "               name='" + employees_generateForm_field + "' " +
                "               value='" + employees_generateForm_value + "'>" +
                "      </div>";
    }
    

    if(employees_generateForm_isEdit){
        method = "put";
        path = "/" + id;
    }else{
        method = "post";
        path = "";
    }

    employees_generateForm_html += "    </div>" +
            "    <div class='form-actions mt-4'>" +
            "      <button class='btn btn-success btn-sm' " +
            "              hx-" + method + "='/employees" + path + "' " +
            "              hx-include='closest form' " +
            "              hx-target='.datagrid-container-master' " +
            "              hx-swap='outerHTML'>Save</button>" +
            "      <button class='btn btn-error btn-sm' " +
            "              hx-get='/employees' " +
            "              hx-target='.datagrid-container-master' " +
            "              hx-swap='outerHTML'>Cancel</button>" +
            "    </div>" +
            "  </form>" +
            "</div>";
    
    return employees_generateForm_html;
}


// Get new employee form (partial html)
CreateEndpoint("GET", "/employees/new", "getNewEmployeeForm");
function getNewEmployeeForm(args) {
    headers = {"Content-Type": "text/html"};
    return Response(headers, employees_generateForm("new", employees_defaultValues), 200);
}

// Create new employee
CreateEndpoint("POST", "/employees", "createEmployee");
function createEmployee(args) {
    
    create_fields = [
        "Name", "Surname", "Age", "Address", "City", "Email"
    ];

    create_values = {};
    for(create_i = 0; create_i < Size(create_fields); create_i++) {
        create_field = create_fields[create_i];
        create_values[create_i]= GetValueFromForm(args["Body"], create_field);
    }

    create_values2 = {};
    create_values2["Name"] = GetValueFromForm(args["Body"], "Name");
    create_values2["Surname"] = GetValueFromForm(args["Body"], "Surname");
    create_values2["Age"] = GetValueFromForm(args["Body"], "Age");
    create_values2["Address"] = GetValueFromForm(args["Body"], "Address");
    create_values2["City"] = GetValueFromForm(args["Body"], "City");
    create_values2["Email"] = GetValueFromForm(args["Body"], "Email");

    if (!IsInt(create_values2["age"]))
    {
        create_headers = {"Content-Type": "text/html"};
        create_employees_alert = "<script>Swal.fire({title: 'ERROR!', text: 'Age must be an integer.', icon: 'error', confirmButtonText: 'Close'});</script>";        
        create_employees_validationError_html = getNewEmployeeFormWithValues(create_values2, create_employees_alert);
                
        return Response(create_headers, create_employees_validationError_html, 200);
    }
    
    create_query = "INSERT INTO employees (";
    create_first = true;
    for(create_i = 0; create_i < Size(create_fields); create_i++) {
        if (!create_first){ 
            create_query += ", ";
        }    
        create_query += create_fields[create_i];
        create_first = false;
    }
    
    create_query += ") VALUES (";
    create_first = true;
    for(create_i = 0; create_i < Size(create_fields); create_i++) {
        if (!create_first) {
            create_query += ", ";
        }
        
        create_query += "@" + create_fields[create_i];
        create_first = false;
    }
    create_query += ")";


    create_sqlParams = {};
    for(create_i = 0; create_i < Size(create_fields); create_i++) {
        create_sqlParams.Add({"@"+create_fields[create_i], create_values[create_i]});
    }
    
    sqlNonQuery(create_query, create_sqlParams);

    create_args2 = {};
    create_args2["QueryParams"] = {"page": 1};

    create_employees_alert = "<script>Swal.fire({title: 'Successfully added!', text: 'Added employee " + create_values2["name"] +  " "+ create_values2["surname"] + ".', icon: 'success', confirmButtonText: 'Close'});</script>";

    create_args2["QueryParams"] = {"alertText": create_employees_alert};

    return getEmployees(create_args2);
}

// Get new employee form with values (partial html)
function getNewEmployeeFormWithValues(values, errorScript) {
    html = "<div class='datagrid-container-master'>" +
           "  <form class='vertical-form eight-column-form'>" +
           "    <div class='grid grid-cols-8 gap-4'>" +
           "      <div><label>Name:</label><input class='input input-bordered input-sm w-full' name='Name' value='" + values["Name"] + "'></div>" +
           "      <div><label>Surname:</label><input class='input input-bordered input-sm w-full' name='Surname' value='" + values["Surname"] + "'></div>" +
           "      <div><label>Age:</label><input class='input input-bordered input-sm w-full' name='Age' value='" + values["Age"] + "'></div>" +
           "      <div><label>Address:</label><input class='input input-bordered input-sm w-full' name='Address' value='" + values["Address"] + "'></div>" +
           "      <div><label>City:</label><input class='input input-bordered input-sm w-full' name='City' value='" + values["City"] + "'></div>" +
           "      <div><label>Email:</label><input class='input input-bordered input-sm w-full' name='Email' value='" + values["Email"] + "'></div>" +
           "    </div>" +
           "    <div class='form-actions mt-4'>" +
           "      <button class='btn btn-success btn-sm' " +
           "              hx-post='/employees' " +
           "              hx-include='closest form' " +
           "              hx-target='.datagrid-container-master' " +
           "              hx-swap='outerHTML'>Save</button>" +
           "      <button class='btn btn-error btn-sm' " +
           "              hx-get='/employees' " +
           "              hx-target='.datagrid-container-master' " +
           "              hx-swap='outerHTML'>Cancel</button>" +
           "    </div>" +
           "  </form>" +
           "</div>";

    html += errorScript;
    
    return html;
}



// Get edit employee form (partial html)
CreateEndpoint("GET", "/employees/{id}/edit", "getEditEmployeeForm");
function getEditEmployeeForm(args) {

    id = args["RouteValues"]["Id"];
    query = "SELECT " + employees_columns.Join(", ") + " FROM employees WHERE id = @id";
    
    sqlParams = {};
    sqlParams.Add({"@id", int(id)});

    transaction = sqlQuery(query, sqlParams);

    if(transaction == null || Size(transaction) < 2) {
        headers = {"Content-Type": "text/html"};
        return Response(headers, "<script>showError('Employee not found');</script>", 200);
    }
    
    values = {};
    for(i = 1; i < Size(employees_columns); i++) {
        values[employees_columns[i]] = transaction[1][i];
    }
    
    headers = {"Content-Type": "text/html"};
    return Response(headers, employees_generateForm("edit", values, id), 200);
}

// Update employee
CreateEndpoint("PUT", "/employees/{id}", "updateEmployee");
function updateEmployee(args) {
    id = args["RouteValues"]["Id"];

    fields = [
        "Name", "Surname", "Age", "Address", "City", "Email"
    ];

    values = {};

    for(i = 0; i < Size(fields); i++) {
        field = fields[i];
        values[field] = GetValueFromForm(args["Body"], field);
    }

    errorHtml = "";
    if(!IsInt(values["Age"])) {
        headers = {"Content-Type": "text/html"};
        edit_employee_alert = "<script>Swal.fire({title: 'ERROR!', text: 'Age must be an integer.', icon: 'error', confirmButtonText: 'Close'});</script>";  
        edit_employee_validationError_html = getEditEmployeeFormWithValues(id, values, edit_employee_alert);
        return Response(headers, edit_employee_validationError_html, 200);
    }


    query = "UPDATE employees SET ";
    first = true;
    for(i = 0; i < Size(fields); i++) {
        if (!first) {
            query += ", ";
        }
        query += fields[i] + " = @" + fields[i];
        first = false;
    }
    query += " WHERE id = @id";

    sqlParams = {};
    for(i = 0; i < Size(fields); i++) {
        sqlParams.Add({"@" + fields[i], values[i]});
    }
    sqlParams.Add({"@id", int(id)});

    sqlNonQuery(query, sqlParams);


    args2 = {};
    args2["QueryParams"] = {};
    if (Contains(args2["QueryParams"], "page")) {
        args2["QueryParams"]["page"] = args2["QueryParams"]["page"];
    } else {
        args2["QueryParams"]["page"] = 1;
    }
    
    return getEmployees(args2);
}

// Get edit employee form with values (partial html)
function getEditEmployeeFormWithValues(id, values, errorHtml) {
    query = "SELECT Name, Surname, Age, Address, City, Email FROM Employees WHERE Id = @id";

    sqlParams = {};
    sqlParams.Add({"@id", int(id)});
    transaction = sqlQuery(query, sqlParams);
    if(transaction == null || Size(transaction) < 2) {
        headers = {"Content-Type": "text/html"};
        return Response(headers, "<div class='alert alert-error'>Employee not found</div>", 200);
    }
    row = transaction[1];
    html = "<div class='datagrid-container-master'>" +
           "  <form class='vertical-form eight-column-form'>";
           
    html += "    <div class='grid grid-cols-8 gap-4'>" +
    "      <div><label>Name:</label><input class='input input-bordered input-sm w-full' name='Name' value='" + row[0] + "'></div>" +
    "      <div><label>Surname:</label><input class='input input-bordered input-sm w-full' name='Surname' value='" + row[1] + "'></div>" +
    "      <div><label>Age:</label><input class='input input-bordered input-sm w-full' name='Age' value='" + row[2] + "'></div>" +
    "      <div><label>Address:</label><input class='input input-bordered input-sm w-full' name='Address' value='" + row[3] + "'></div>" +
    "      <div><label>City:</label><input class='input input-bordered input-sm w-full' name='City' value='" + row[4] + "'></div>" +
    "      <div><label>Email:</label><input class='input input-bordered input-sm w-full' name='Email' value='" + row[5] + "'></div>" +
    "    </div>" +
    "    <div class='form-actions mt-4'>" +
    "      <button class='btn btn-success btn-sm' " +
    "              hx-put='/employees/" + id + "' " +
    "              hx-include='closest form' " +
    "              hx-target='.datagrid-container-master' " +
    "              hx-swap='outerHTML' " +
    "              >Save</button>" +
    "      <button class='btn btn-error btn-sm' " +
    "              hx-get='/employees' " +
    "              hx-target='.datagrid-container-master' " +
    "              hx-swap='outerHTML' " +
    "              >Cancel</button>" +
    "    </div>" +
    "  </form>" +
    "</div>";

    if(errorHtml != ""){
        html += errorHtml;
    }

    return html;
}



// Delete employee
CreateEndpoint("DELETE", "/employees/{id}", "deleteEmployee");
function deleteEmployee(args) {
    id = args["RouteValues"]["id"];
    
    query = "DELETE FROM employees WHERE id = @id";
    sqlParams = {};
    sqlParams.Add({"@id", int(id)});
    sqlNonQuery(query, sqlParams);
    
    headers = {"Content-Type": "application/json"};
    return Response(headers, '{"Result" : "Success"}', 200);
}



// Check if value is a valid integer
function IsInt(value)
{
    if (value == "")
    {
        return false;
    }

    try
    {        
        int1 = int(value);
        str2 = string(int1);
        if(value != str2){
            return false;
        }
      
        return true; 
    }
    catch(ex)
    {
        return false;
    }

    return false;
}